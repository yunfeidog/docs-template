import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-CKRV3Rln.js";const t={},p=e(`<h2 id="如何高效寻找素数" tabindex="-1"><a class="header-anchor" href="#如何高效寻找素数"><span>如何高效寻找素数</span></a></h2><div class="hint-container tip"><p class="hint-container-title">素数</p><p>如果一个数只能被1和它本身整除，那么这个数就是素数。</p></div><p>实现一个函数，输入一个正整数<code>n</code>，函数返回区间<code>[2,n)</code>中素数的个数。</p><p>函数签名如下：<code>int countPrimes(int n)</code></p><h3 id="一般实现" tabindex="-1"><a class="header-anchor" href="#一般实现"><span>一般实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/***
 * @Description: [2, n)素数的个数
 * @Author: Mr.Tong
 */</span>
<span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/***
 * @Description: 判断一个数是不是素数
 * @Author: Mr.Tong
 */</span>
<span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析问题：该算法的时间复杂度为<code>O(n^2)</code>，使用<code>isPrime</code>函数一个一个的进行判断不是高效的做法，而且就算是使用<code>isPrime</code>函数，也是存在计算冗余的。</p><h3 id="稍加优化" tabindex="-1"><a class="header-anchor" href="#稍加优化"><span>稍加优化</span></a></h3><p><code>isPrime</code>函数是可以进行优化的，优化代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/***
 * @Description: 判断一个数是不是素数
 * @Author: Mr.Tong
 */</span>
<span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>i</code>不需要遍历到<code>n</code>，只需要遍历到<code>sqrt(n)</code>即可，这是因为<code>sqrt(n)</code>是反转临界点，一个数等于两个数相乘，中间的临界点就是<code>sqrt(n)*sqrt(n)</code>，<code>[2,sqrt(n)]</code>之间如果找不到可整除的因子，那么<code>[sqrt(n),n]</code>之间也肯定找不到可整除的因子了，因为是后半部分是前半部分的因子交换所得，这就叫做“乘法因子的交换性”。</p><h3 id="高效实现" tabindex="-1"><a class="header-anchor" href="#高效实现"><span>高效实现</span></a></h3><p>使用“筛数法”进行实现，2是素数，那么在<code>n</code>的范围中，2的倍数就不再是素数了；3是素数，那么在<code>n</code>的范围中，3的倍数就不再是素数了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/***
 * @Description: 筛数法实现求解素数个数
 * @Author: Mr.Tong
 */</span>
<span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//各个数的标记</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//填充都为true</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从头开始，把所有n范围内的素数的倍数都标记为false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果i为素数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//实际标记过程</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//求解true的个数</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//最后结果去掉两个，因为0和1也都是true</span>
    <span class="token keyword">return</span> count <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的过程仍然是可以进行优化的，优化的地方主要有两点：</p><ul><li>外层循环：因为乘法因子的对称性，遍历范围可以设置为<code>[2,sqrt(n)]</code>。</li><li>内层循环：<code>j</code>每次都从2开始存在冗余计算，只需要从<code>i</code>的平方开始标记即可。</li></ul><p>重新优化后的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/***
 * @Description: 筛数法实现求解素数个数
 * @Author: Mr.Tong
 */</span>
<span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//各个数的标记</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//填充都为true</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从头开始，把所有n范围内的素数的倍数都标记为false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果i为素数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//实际标记过程</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//求解true的个数</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//最后结果去掉两个，因为0和1也都是true</span>
    <span class="token keyword">return</span> count <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的算法有一个名字，叫做<code>Sieve of Eratosthenes</code>，该算法的时间复杂度为<code>O(NloglogN)</code>。</p><h2 id="如何高效进行模幂运算" tabindex="-1"><a class="header-anchor" href="#如何高效进行模幂运算"><span>如何高效进行模幂运算</span></a></h2><h3 id="如何处理数组指数" tabindex="-1"><a class="header-anchor" href="#如何处理数组指数"><span>如何处理数组指数</span></a></h3><h3 id="如何处理mod运算" tabindex="-1"><a class="header-anchor" href="#如何处理mod运算"><span>如何处理mod运算</span></a></h3><h3 id="如何高效求幂" tabindex="-1"><a class="header-anchor" href="#如何高效求幂"><span>如何高效求幂</span></a></h3><h2 id="如何运用二分搜索算法" tabindex="-1"><a class="header-anchor" href="#如何运用二分搜索算法"><span>如何运用二分搜索算法</span></a></h2><h2 id="如何高效解决接雨水问题" tabindex="-1"><a class="header-anchor" href="#如何高效解决接雨水问题"><span>如何高效解决接雨水问题</span></a></h2><h2 id="如何去除有序数组的重复元素" tabindex="-1"><a class="header-anchor" href="#如何去除有序数组的重复元素"><span>如何去除有序数组的重复元素</span></a></h2><h2 id="如何寻找最长回文子串" tabindex="-1"><a class="header-anchor" href="#如何寻找最长回文子串"><span>如何寻找最长回文子串</span></a></h2><h2 id="如何运用贪心思想玩跳跃游戏" tabindex="-1"><a class="header-anchor" href="#如何运用贪心思想玩跳跃游戏"><span>如何运用贪心思想玩跳跃游戏</span></a></h2><h2 id="如何运用贪心算法做时间管理" tabindex="-1"><a class="header-anchor" href="#如何运用贪心算法做时间管理"><span>如何运用贪心算法做时间管理</span></a></h2><h2 id="如何判定括号合法性" tabindex="-1"><a class="header-anchor" href="#如何判定括号合法性"><span>如何判定括号合法性</span></a></h2><h2 id="如何调度考生的座位" tabindex="-1"><a class="header-anchor" href="#如何调度考生的座位"><span>如何调度考生的座位</span></a></h2><h2 id="union-find算法详解" tabindex="-1"><a class="header-anchor" href="#union-find算法详解"><span>Union-Find算法详解</span></a></h2><h2 id="union-find算法应用" tabindex="-1"><a class="header-anchor" href="#union-find算法应用"><span>Union-Find算法应用</span></a></h2><h2 id="一行代码就能解决的算法题" tabindex="-1"><a class="header-anchor" href="#一行代码就能解决的算法题"><span>一行代码就能解决的算法题</span></a></h2><h3 id="nim游戏" tabindex="-1"><a class="header-anchor" href="#nim游戏"><span>Nim游戏</span></a></h3><h3 id="石子游戏" tabindex="-1"><a class="header-anchor" href="#石子游戏"><span>石子游戏</span></a></h3><h3 id="电灯开关问题" tabindex="-1"><a class="header-anchor" href="#电灯开关问题"><span>电灯开关问题</span></a></h3>`,37),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","算法小抄高频面试.html.vue"]]),k=JSON.parse('{"path":"/docs/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95.html","title":"高频面试","lang":"en-US","frontmatter":{"title":"高频面试","icon":"write","category":["算法","数据结构"],"tag":["算法","数据结构"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"如何高效寻找素数 素数 如果一个数只能被1和它本身整除，那么这个数就是素数。 实现一个函数，输入一个正整数n，函数返回区间[2,n)中素数的个数。 函数签名如下：int countPrimes(int n) 一般实现 分析问题：该算法的时间复杂度为O(n^2)，使用isPrime函数一个一个的进行判断不是高效的做法，而且就算是使用isPrime函数，也...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/docs-template/docs/algdata/lbld/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"网站的标1题"}],["meta",{"property":"og:title","content":"高频面试"}],["meta",{"property":"og:description","content":"如何高效寻找素数 素数 如果一个数只能被1和它本身整除，那么这个数就是素数。 实现一个函数，输入一个正整数n，函数返回区间[2,n)中素数的个数。 函数签名如下：int countPrimes(int n) 一般实现 分析问题：该算法的时间复杂度为O(n^2)，使用isPrime函数一个一个的进行判断不是高效的做法，而且就算是使用isPrime函数，也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-27T06:35:08.000Z"}],["meta",{"property":"article:author","content":"网站的作者"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:modified_time","content":"2024-04-27T06:35:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高频面试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-27T06:35:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"网站的作者\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"如何高效寻找素数","slug":"如何高效寻找素数","link":"#如何高效寻找素数","children":[{"level":3,"title":"一般实现","slug":"一般实现","link":"#一般实现","children":[]},{"level":3,"title":"稍加优化","slug":"稍加优化","link":"#稍加优化","children":[]},{"level":3,"title":"高效实现","slug":"高效实现","link":"#高效实现","children":[]}]},{"level":2,"title":"如何高效进行模幂运算","slug":"如何高效进行模幂运算","link":"#如何高效进行模幂运算","children":[{"level":3,"title":"如何处理数组指数","slug":"如何处理数组指数","link":"#如何处理数组指数","children":[]},{"level":3,"title":"如何处理mod运算","slug":"如何处理mod运算","link":"#如何处理mod运算","children":[]},{"level":3,"title":"如何高效求幂","slug":"如何高效求幂","link":"#如何高效求幂","children":[]}]},{"level":2,"title":"如何运用二分搜索算法","slug":"如何运用二分搜索算法","link":"#如何运用二分搜索算法","children":[]},{"level":2,"title":"如何高效解决接雨水问题","slug":"如何高效解决接雨水问题","link":"#如何高效解决接雨水问题","children":[]},{"level":2,"title":"如何去除有序数组的重复元素","slug":"如何去除有序数组的重复元素","link":"#如何去除有序数组的重复元素","children":[]},{"level":2,"title":"如何寻找最长回文子串","slug":"如何寻找最长回文子串","link":"#如何寻找最长回文子串","children":[]},{"level":2,"title":"如何运用贪心思想玩跳跃游戏","slug":"如何运用贪心思想玩跳跃游戏","link":"#如何运用贪心思想玩跳跃游戏","children":[]},{"level":2,"title":"如何运用贪心算法做时间管理","slug":"如何运用贪心算法做时间管理","link":"#如何运用贪心算法做时间管理","children":[]},{"level":2,"title":"如何判定括号合法性","slug":"如何判定括号合法性","link":"#如何判定括号合法性","children":[]},{"level":2,"title":"如何调度考生的座位","slug":"如何调度考生的座位","link":"#如何调度考生的座位","children":[]},{"level":2,"title":"Union-Find算法详解","slug":"union-find算法详解","link":"#union-find算法详解","children":[]},{"level":2,"title":"Union-Find算法应用","slug":"union-find算法应用","link":"#union-find算法应用","children":[]},{"level":2,"title":"一行代码就能解决的算法题","slug":"一行代码就能解决的算法题","link":"#一行代码就能解决的算法题","children":[{"level":3,"title":"Nim游戏","slug":"nim游戏","link":"#nim游戏","children":[]},{"level":3,"title":"石子游戏","slug":"石子游戏","link":"#石子游戏","children":[]},{"level":3,"title":"电灯开关问题","slug":"电灯开关问题","link":"#电灯开关问题","children":[]}]}],"git":{"createdTime":1714199708000,"updatedTime":1714199708000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1106},"filePathRelative":"docs/algdata/lbld/算法小抄高频面试.md","localizedDate":"April 27, 2024","excerpt":"<h2>如何高效寻找素数</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">素数</p>\\n<p>如果一个数只能被1和它本身整除，那么这个数就是素数。</p>\\n</div>\\n<p>实现一个函数，输入一个正整数<code>n</code>，函数返回区间<code>[2,n)</code>中素数的个数。</p>\\n<p>函数签名如下：<code>int countPrimes(int n)</code></p>","autoDesc":true}');export{d as comp,k as data};
