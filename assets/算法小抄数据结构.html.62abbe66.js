import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as h,a as r}from"./app.d84bbd41.js";const d={},i=r('<h2 id="手写lru缓存淘汰算法" tabindex="-1"><a class="header-anchor" href="#手写lru缓存淘汰算法" aria-hidden="true">#</a> 手写LRU缓存淘汰算法</h2><h3 id="lru算法描述" tabindex="-1"><a class="header-anchor" href="#lru算法描述" aria-hidden="true">#</a> LRU算法描述</h3><h3 id="lru算法设计" tabindex="-1"><a class="header-anchor" href="#lru算法设计" aria-hidden="true">#</a> LRU算法设计</h3><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><h2 id="手写lfu算法" tabindex="-1"><a class="header-anchor" href="#手写lfu算法" aria-hidden="true">#</a> 手写LFU算法</h2><h3 id="算法描述" tabindex="-1"><a class="header-anchor" href="#算法描述" aria-hidden="true">#</a> 算法描述</h3><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析" aria-hidden="true">#</a> 思路分析</h3><h3 id="代码框架" tabindex="-1"><a class="header-anchor" href="#代码框架" aria-hidden="true">#</a> 代码框架</h3><h3 id="lfu核心逻辑" tabindex="-1"><a class="header-anchor" href="#lfu核心逻辑" aria-hidden="true">#</a> LFU核心逻辑</h3><h2 id="二叉树搜索树操作集锦" tabindex="-1"><a class="header-anchor" href="#二叉树搜索树操作集锦" aria-hidden="true">#</a> 二叉树搜索树操作集锦</h2><h3 id="判断bst的合法性" tabindex="-1"><a class="header-anchor" href="#判断bst的合法性" aria-hidden="true">#</a> 判断BST的合法性</h3><h3 id="在bst中查找一个数是否存在" tabindex="-1"><a class="header-anchor" href="#在bst中查找一个数是否存在" aria-hidden="true">#</a> 在BST中查找一个数是否存在</h3><h3 id="在bst中插入一个数" tabindex="-1"><a class="header-anchor" href="#在bst中插入一个数" aria-hidden="true">#</a> 在BST中插入一个数</h3><h3 id="在bst中删除一个数" tabindex="-1"><a class="header-anchor" href="#在bst中删除一个数" aria-hidden="true">#</a> 在BST中删除一个数</h3><h2 id="完全二叉树的节点数为什么难算" tabindex="-1"><a class="header-anchor" href="#完全二叉树的节点数为什么难算" aria-hidden="true">#</a> 完全二叉树的节点数为什么难算</h2><h3 id="思路分析-1" tabindex="-1"><a class="header-anchor" href="#思路分析-1" aria-hidden="true">#</a> 思路分析</h3><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h3><h2 id="用各种遍历框架序列化和反序列化二叉树" tabindex="-1"><a class="header-anchor" href="#用各种遍历框架序列化和反序列化二叉树" aria-hidden="true">#</a> 用各种遍历框架序列化和反序列化二叉树</h2><h3 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><h3 id="前序遍历解法" tabindex="-1"><a class="header-anchor" href="#前序遍历解法" aria-hidden="true">#</a> 前序遍历解法</h3><h3 id="后序遍历解法" tabindex="-1"><a class="header-anchor" href="#后序遍历解法" aria-hidden="true">#</a> 后序遍历解法</h3><h3 id="中序遍历解法" tabindex="-1"><a class="header-anchor" href="#中序遍历解法" aria-hidden="true">#</a> 中序遍历解法</h3><h3 id="层级遍历解法" tabindex="-1"><a class="header-anchor" href="#层级遍历解法" aria-hidden="true">#</a> 层级遍历解法</h3><h2 id="git原理之二叉树最近公共祖先" tabindex="-1"><a class="header-anchor" href="#git原理之二叉树最近公共祖先" aria-hidden="true">#</a> Git原理之二叉树最近公共祖先</h2><h3 id="二叉树的最近公共祖先" tabindex="-1"><a class="header-anchor" href="#二叉树的最近公共祖先" aria-hidden="true">#</a> 二叉树的最近公共祖先</h3><h3 id="思路分析-2" tabindex="-1"><a class="header-anchor" href="#思路分析-2" aria-hidden="true">#</a> 思路分析</h3><h2 id="特殊数据结构-单调栈" tabindex="-1"><a class="header-anchor" href="#特殊数据结构-单调栈" aria-hidden="true">#</a> 特殊数据结构-单调栈</h2><h3 id="单调栈解题模版" tabindex="-1"><a class="header-anchor" href="#单调栈解题模版" aria-hidden="true">#</a> 单调栈解题模版</h3><h3 id="题目变形" tabindex="-1"><a class="header-anchor" href="#题目变形" aria-hidden="true">#</a> 题目变形</h3><h3 id="如何处理循环数组" tabindex="-1"><a class="header-anchor" href="#如何处理循环数组" aria-hidden="true">#</a> 如何处理循环数组</h3><h2 id="特殊数据结构-单调队列" tabindex="-1"><a class="header-anchor" href="#特殊数据结构-单调队列" aria-hidden="true">#</a> 特殊数据结构-单调队列</h2><h3 id="搭建解题框架" tabindex="-1"><a class="header-anchor" href="#搭建解题框架" aria-hidden="true">#</a> 搭建解题框架</h3><h3 id="实现单调队列数据结构" tabindex="-1"><a class="header-anchor" href="#实现单调队列数据结构" aria-hidden="true">#</a> 实现单调队列数据结构</h3><h3 id="算法复杂度分析" tabindex="-1"><a class="header-anchor" href="#算法复杂度分析" aria-hidden="true">#</a> 算法复杂度分析</h3><h2 id="如何判断回文链表" tabindex="-1"><a class="header-anchor" href="#如何判断回文链表" aria-hidden="true">#</a> 如何判断回文链表</h2><h3 id="判断回文单链表" tabindex="-1"><a class="header-anchor" href="#判断回文单链表" aria-hidden="true">#</a> 判断回文单链表</h3><h3 id="优化空间复杂度" tabindex="-1"><a class="header-anchor" href="#优化空间复杂度" aria-hidden="true">#</a> 优化空间复杂度</h3><h3 id="最后总结" tabindex="-1"><a class="header-anchor" href="#最后总结" aria-hidden="true">#</a> 最后总结</h3><h2 id="秀操作-纯递归反转链表" tabindex="-1"><a class="header-anchor" href="#秀操作-纯递归反转链表" aria-hidden="true">#</a> 秀操作-纯递归反转链表</h2><h3 id="递归反转整个链表" tabindex="-1"><a class="header-anchor" href="#递归反转整个链表" aria-hidden="true">#</a> 递归反转整个链表</h3><h3 id="反转链表前n个节点" tabindex="-1"><a class="header-anchor" href="#反转链表前n个节点" aria-hidden="true">#</a> 反转链表前N个节点</h3><h3 id="反转链表的一部分" tabindex="-1"><a class="header-anchor" href="#反转链表的一部分" aria-hidden="true">#</a> 反转链表的一部分</h3><h3 id="最后总结-1" tabindex="-1"><a class="header-anchor" href="#最后总结-1" aria-hidden="true">#</a> 最后总结</h3><h2 id="秀操作-k个一组反转链表" tabindex="-1"><a class="header-anchor" href="#秀操作-k个一组反转链表" aria-hidden="true">#</a> 秀操作-K个一组反转链表</h2><h3 id="分析问题" tabindex="-1"><a class="header-anchor" href="#分析问题" aria-hidden="true">#</a> 分析问题</h3><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h3><h3 id="最后总结-2" tabindex="-1"><a class="header-anchor" href="#最后总结-2" aria-hidden="true">#</a> 最后总结</h3>',47),n=[i];function t(s,c){return e(),h("div",null,n)}const u=a(d,[["render",t],["__file","算法小抄数据结构.html.vue"]]);export{u as default};
